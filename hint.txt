1
Clearly, it's enough to look at values of the array modulo KK, since we only care about whether the sum of two elements is 00 modulo KK or not.

From now on, assume all the array elements are between 0 and K−1.

Now suppose you have x and y in your subsequence. The restriction is that x+y/≡0(modK).
Now that 0≤x,y<K, what does this tell you about x and y? Are there any more restrictions?


222222222
The above restriction essentially says that x+y=K cannot happen. And in fact, this is the only restriction we need to care about.

That is, if we fix a value of x, we cannot pick any instance of K−x into the subsequence. On the other hand, any number of x-s is fair game.
Similarly, if we choose K-xK−x, we can take as many of it as we like, but no xx-s.

Let freqx  be the number of times x appears in the array.

From the above discussion, how many ways are there to pick x or  K−x?


33333333333333
We can pick any subset of the x-s in 2^{freq_x} ways. 
Similarly, we can pick any subset of the (K-x)-s in 2^{freq_{K-x}}2 ways.
In these two, the empty subset is counted twice, so we subtract it to obtain 2^{freq_x} + 2^{freq_{K-x}} - 1 ways.

The final answer is thus the product of this value across all x such that x≤K−x.

However, there's one more thing to take care of here: we assumed x \neq K−x. What if they're equal?




44444444
When x = K−x, we are allowed to only take at most copy of x, since taking two would break the sum condition.

So, the number of ways in this case is 1 + freq_x instead of 2^x2 : 1 way for not taking anything, and 1 way for each copy.

So, the final solution is to:

Start the answer at 1
Then, for each xx such that  0≤x≤K−x,
if x = K−x, multiply 1 + freq_x to the answer
otherwise, multiply 2^{freq_x} + 2^{freq_{K-x}} - 1 to the answer

Powers of 2 modulo 10^9 + 7 can be precomputed in an array so that the factor for each x is found in \mathcal{O}(1)O(1) time, thus solving the entire problem in \mathcal{O}(K)O(K).